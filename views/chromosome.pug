script(src='javascripts/echarts.js')
script(src='javascripts/jquery-3.6.0.js')
link(href='stylesheets/bootstrap.css', rel='stylesheet')
script(src='javascripts/bootstrap.bundle.js')

//- #main(style='width: 100%; height: 250px')
script.
    //- var chartDom = document.getElementById("main");
    //- var myChart = echarts.init(chartDom, null, { renderer: "canvas" });
    fetch("data/chResults.json")
        .then(response => response.json())
        .then(data => {
            let color = ["#bd6d6c", "#7b9ce1", "#75d874", "#75d874"];
            let deeper = ["#955", "#68c", "#6b6", "#6b6"];
            function renderItem(params, api) {
                //- 0:index, 1:start, 2:end, 3:exon, 4:type, 5:name, 6:product
                let categoryIndex = api.value(0);
                let mid = api.coord([(api.value(1) + api.value(2)) / 2, 0]);
                let width = api.size([api.value(2) - api.value(1), 0])[0];
                let height = api.size([0, api.value(3)])[1] * 2;
                let textContent = {
                    style: {
                        text: api.value(5),
                        fill: "#444d",
                    },
                    emphasis: {
                        style: {
                            text: api.value(5),
                            fill: "#000f",
                        },
                    },
                };
                let textConfig = { position: "inside", rotation: -1.56 };
                //- type3 画圆
                if (api.value(4)) {
                    let radius = width / 2;
                    let shape = {
                        cx: mid[0],
                        cy: mid[1],
                        r: radius,
                    };
                    return {
                        type: "circle",
                        shape: shape,
                        style: {
                            fill: color[api.value(4)],
                        },
                        textConfig: textConfig,
                        textContent: textContent,
                    };
                } else {
                    let shape = {
                        x: mid[0] - width / 2,
                        y: mid[1] - height / 2,
                        width: width,
                        height: height,
                    };
                    return {
                        type: "rect",
                        shape: shape,
                        style: {
                            fill: color[api.value(4)],
                            stroke: "red",
                        },
                        textConfig: textConfig,
                        textContent: textContent,
                    };
                }
            }
            for (let ii = 0; ii < data.length; ii++) {
                let option;
                let maxExon = 1;
                console.log(data.length);
                let chromosome = data[ii];
                $("body").append('<div id="main' + ii + '"style="width: 100%; height: 250px"></div>');
                let chartDom = document.getElementById("main" + ii);
                let myChart = echarts.init(chartDom, null, { renderer: "canvas" });
                let datas = [];
                for (let i = 0; i < chromosome["data"].length; i++) {
                    let c = chromosome["data"][i];
                    let color = "red";
                    let height = c.exon;
                    if (c.type == "3") {
                        color = "blue";
                        height = 1;
                    }
                    maxExon = Math.max(maxExon, height);
                    datas.push([0, c.start, c.end, c.exon, c.type, c.gene, c.product, c.exactStart.toLocaleString(), c.exactEnd.toLocaleString(), height]);
                }
                console.log(datas);
                option = {
                    title: {
                        text: chromosome["species"] + " " + chromosome["chromosome"],
                        left: "center",
                        top: "top",
                        textStyle: {
                            fontSize: 20,
                            fontWeight: "bold",
                        },
                    },
                    tooltip: {
                        formatter: params => {
                            return params.value[5] + "<br> number of exon: " + params.value[3] + "<br>product: " + params.value[6] + "<br>start: " + params.value[7] + "<br>end: " + params.value[8];
                        },
                    },
                    grid: {},
                    legend: {},
                    xAxis: {
                        max: chromosome["end"],
                        splitNumber: 3,
                        splitLine: {
                            show: false,
                        },
                        axisTick: {
                            show: false,
                        },
                        axisLabel: {
                            show: false,
                        },
                    },
                    yAxis: {
                        name: "number of exon",
                        nameLocation: "middle",
                        axisLabel: {
                            show: false,
                        },
                        min: -maxExon,
                        max: maxExon,
                        interval: 1,
                    },
                    series: [
                        {
                            type: "custom",
                            renderItem: renderItem,
                            encode: {
                                x: [1, 2],
                                tooltip: [1, 2, 3, 4, 5, 6],
                            },
                            data: datas,
                        },
                    ],
                };
                myChart.setOption(option);
            }
        });
