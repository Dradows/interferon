extends layout

block content
  .d-flex.justify-content-center.m-3(role='group')
    .form-floating.w-75
      textarea#textArea.form-control
      label(for='textArea') phylum, class, order, family, genus, species 可输入多种，请以逗号分隔
    .form-floating
      select#select.form-select
        option(value='NC', selected) only NC
        option(value='both') both NC and NW
      label(for='select') Chromosome type
    buttun#btn.btn.btn-primary.pt-3 Submit
  //- #main(style='width: 100%; height: 250px')
  script.
    let tree;
    let groupDatas;
    //- var chartDom = document.getElementById("main");
    //- var myChart = echarts.init(chartDom, null, { renderer: "canvas" });
    async function draw(speciesList, chk) {
      if (groupDatas == null) {
        let data = await fetch("data/chResults.json");
        groupDatas = await data.json();
      }
      $(".echarts").remove();
      let color = ["#bd6d6c", "#7b9ce1", "#75d874", "#75d874"];
      let deeper = ["#955", "#68c", "#6b6", "#6b6"];
      function renderItem(params, api) {
        //- 0:index, 1:start, 2:end, 3:exon, 4:type, 5:name, 6:product
        let categoryIndex = api.value(0);
        let mid = api.coord([(api.value(1) + api.value(2)) / 2, 0]);
        let width = api.size([api.value(2) - api.value(1), 0])[0];
        let height = api.size([0, api.value(9)])[1];
        let textContent = {
          style: {
            text: api.value(5),
            fill: "#444d",
          },
          emphasis: {
            style: {
              text: api.value(5),
              fill: "#000f",
            },
          },
        };
        let textConfig = { position: "top" };

        let shape = {
          x: mid[0] - width / 2,
          y: mid[1] - height,
          width: width,
          height: height,
        };
        let result = {
          type: "rect",
          shape: shape,
          style: api.style({
            fill: color[api.value(4)],
          }),
          //- textConfig: textConfig,
          //- textContent: textContent,
        };
        if (api.value(4) == 3) {
          //-   result.textConfig = textConfig;
          //-   result.textContent = textContent;
        }
        return result;
        //- }
      }
      let offset = 0;
      for (let ii = 0; ii < groupDatas.length; ii++) {
        if ((chk && groupDatas[ii].chromosome.includes("NW")) || !speciesList.includes(groupDatas[ii].species)) {
          continue;
        }
        let option;
        let maxExon = 1;
        let chromosome = groupDatas[ii];
        //- $("body").append('<div class="d-flex justify-content-center">' + chromosome["species"] + " " + chromosome["chromosome"]);
        //- $("body").append('<div id="main' + ii + '"style="width: 95%; height: 150px; margin:auto;"></div></div>');
        $("body").append('<div class="echarts" id="main' + ii + '"style="width: 95%; height: 100px; margin:auto;"></div>');
        let chartDom = document.getElementById("main" + ii);
        let myChart = echarts.init(chartDom, null, { renderer: "canvas" });
        let datas = [];
        for (let i = 0; i < chromosome["data"].length; i++) {
          let c = chromosome["data"][i];
          let color = "red";
          let height = c.exon;
          height = 1;
          let label = {};
          if (c.type == "3") {
            color = "blue";
            offset = (offset + 1) % 3;
            datas.push({
              value: [0, c.start, c.end, c.exon, c.type, c.gene, c.product, c.exactStart.toLocaleString(), c.exactEnd.toLocaleString(), height, offset],
              label: {
                formatter: function (params) {
                  return params.value[5];
                },
                show: true,
                position: "left",
                padding: 5,
                borderColor: "#0000",
                borderWidth: 1,
              },
              labelLine: {
                show: true,
                smooth: true,
              },
            });
          } else datas.push({ value: [0, c.start, c.end, c.exon, c.type, c.gene, c.product, c.exactStart.toLocaleString(), c.exactEnd.toLocaleString(), height, offset] });
          maxExon = Math.max(maxExon, height);
        }
        option = {
          //-   title: {
          //-     text: chromosome["species"] + " " + chromosome["chromosome"],
          //-     left: "center",
          //-     top: "top",
          //-     textStyle: {
          //-       fontSize: 20,
          //-       fontWeight: "bold",
          //-     },
          //-   },
          tooltip: {
            formatter: params => {
              return params.value[5] + "<br> number of exon: " + params.value[3] + "<br>product: " + params.value[6] + "<br>start: " + params.value[7] + "<br>end: " + params.value[8];
            },
          },
          grid: {
            bottom: 10,
            left: "3%",
            right: 0,
            containLabel: true,
          },
          legend: {},
          xAxis: {
            max: chromosome["end"],
            splitNumber: 3,
            splitLine: {
              show: false,
            },
            axisTick: {
              show: false,
            },
            axisLabel: {
              show: false,
            },
          },
          yAxis: {
            name: chromosome["species"].split("_")[1] + "\n" + chromosome["chromosome"].split(" ")[1],
            nameGap: 5,
            axisLabel: {
              show: false,
            },
            //- min: -maxExon,
            max: maxExon,
            interval: 1,
          },
          series: [
            {
              type: "custom",
              renderItem: renderItem,
              encode: {
                x: [1, 2],
                itemName: 5,
              },
              data: datas,
              labelLayout: {
                dx: -30,
                y: 15,
                align: "left",
                moveOverlap: "shiftX",
              },
            },
          ],
        };
        myChart.setOption(option);
      }
    }

    function getSpecies(root, list, chk) {
      let result = [];
      for (x of list) {
        if (chk || root.name.includes(x)) {
          chk = true;
          break;
        }
      }
      if (root.hasOwnProperty("children")) {
        for (x of root.children) {
          result.push(...getSpecies(x, list, chk));
        }
      } else if (chk) {
        result.push(root.name);
      }
      return result;
    }

    fetch("data/tree.json")
      .then(data => data.json())
      .then(json => {
        tree = json;
        draw(getSpecies(tree, [], true), true);
      });
    $("#btn").on("click", async () => {
      if (tree == null) {
        let res = await fetch("data/tree.json");
        tree = await res.json();
      }
      let tempList = $("#textArea").val().split(/[,，]/);
      tempList = tempList.map(x => x.trim());
      console.log(tempList);
      let speciesList = getSpecies(tree, tempList, false);
      let chk;
      if ($("#select").val() == "NC") {
        chk = true;
      } else {
        chk = false;
      }
      draw(speciesList, chk);
    });
